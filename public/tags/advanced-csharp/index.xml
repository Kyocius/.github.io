<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced CSharp on 游尔曼斯克</title>
    <link>https://kyocius.github.io/tags/advanced-csharp/</link>
    <description>Recent content in Advanced CSharp on 游尔曼斯克</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Kyocius. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kyocius.github.io/tags/advanced-csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# 进阶小册  01 - 并发与异步</title>
      <link>https://kyocius.github.io/posts/dotnet/advanced-csharp-1/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/advanced-csharp-1/</guid>
      <description>前言 就是太久没写异步，有的用法忘了。所以写篇博客回顾一下。
线程 Thread 虽然在 C# 中 Task 的使用频率远超直接使用线程，但是有关线程的概念还是要复习一下的。
才不是因为我全忘了
创建线程 Create a Thread using System; using System.Threading; var t = new Thread(WriteY); t.Start(); for (var i = 0; i &amp;lt; 1000; i++) { Console.Write(&amp;#34;x&amp;#34;); } void WriteY() { for (var i = 0; i &amp;lt; 1000; i++) Console.Write(&amp;#34;y&amp;#34;); } //输出： xxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyy... xxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyy... xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyy... yyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxx... 我们可以通过 Name 属性来访问线程的名字：
WriteLine(Thread.CurrentThread.Name); Join 与 Sleep 你可以使用 Join 方法来等待线程结束：
Thread t = new Thread(Go); t.</description>
    </item>
    
  </channel>
</rss>
