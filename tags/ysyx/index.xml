<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ysyx on 游尔曼斯克</title>
    <link>https://kyocius.github.io/tags/ysyx/</link>
    <description>Recent content in ysyx on 游尔曼斯克</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Kyocius. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 02 Feb 2024 11:25:05 -0400</lastBuildDate><atom:link href="https://kyocius.github.io/tags/ysyx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数电与计算机体系结构 01：入门</title>
      <link>https://kyocius.github.io/posts/ysyx/arch-book/arch-book-1/</link>
      <pubDate>Fri, 02 Feb 2024 11:25:05 -0400</pubDate>
      
      <guid>https://kyocius.github.io/posts/ysyx/arch-book/arch-book-1/</guid>
      <description>前言 此系列文章是《Digital Design and Computer Architecture: RISC-V Edition》的读书笔记。
数字抽象的深层含义 数字电路使用离散值，而物理值一般是连续的，所以电路设计者要想办法把离散值和连续值对应起来。
供电电压 零伏特电压一般指的是接地（GND）。从上世纪 70 年代起，供电电压从 5V 降到了 1.2V 以下。
逻辑电平 逻辑电平是指数字电路中电信号的电压水平，用于表示逻辑状态。在数字电路中，通常将电压分为两个离散的状态，分别代表逻辑值 0 和逻辑值 1。
噪声裕度 表示可以容忍的电压差值：
$$ NM_{L} = V_{IL} - V_{OL} $$ $$ NM_{H} = V_{OH} - V_{IH} $$
直流传输特性 将输入电压作为自变量，将输出电压作为因变量，抽象出一个函数。其形成的图像很有特点，叫作直流传输特性（DC Transfer Characteristics）。图像请参阅原书。
静态电路法则 静态电路法则要求，在给定逻辑上有效的输入情况下，每个电路元件都将产生逻辑上有效的输出。
为了提高生产力，诞生了四个逻辑家族：
 TTL CMOS LVTTL LVCMOS  </description>
    </item>
    
    <item>
      <title>笨方法学 C 附加题不完全解答</title>
      <link>https://kyocius.github.io/posts/ysyx/clang-review/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/ysyx/clang-review/</guid>
      <description>前言 笔者撰写本文时还在上大一，数据结构基础几乎为零，所以会有一些可笑的问题和不合时宜的吐槽。
本文尝试解答书后附加题，有的章节太简单就略过了。
练习10：字符串数组和循环  如何使用 ,（逗号）字符来在for循环的每一部分中，;（分号）之间分隔多条语句？  for (i = 0, j = 10; i &amp;lt; 10; i++, j--) 查询 NULL 是什么东西，看看它会打印出什么？  在 C 语言中，NULL 是一个宏定义，通常用于表示指针不指向任何有效的对象或地址。NULL 的确切定义可能因编译器和平台而异，但通常它被定义为 (void *)0，即一个转换为 void 指针类型的零值。
当你尝试打印一个指向 NULL的指针时，结果会取决于你是如何打印它的。在 C 语言中，如果你使用 %p 格式化标志（用于打印指针地址）和 printf 函数，通常会打印出一个表示空指针的值，通常是 (nil) 或者 0x0，具体取决于编译器和平台。
看看你是否能在打印之前将 states 的一个元素赋值给 argv 中的元素，再试试相反的操作？  #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { char *states[] = {&amp;#34;California&amp;#34;, &amp;#34;Oregon&amp;#34;, &amp;#34;Washington&amp;#34;, &amp;#34;Texas&amp;#34;}; // 将states的一个元素赋值给argv的一个元素  // 注意：这通常不是个好主意，因为argv通常不应被修改  if (argc &amp;gt; 1) { argv[1] = states[0]; printf(&amp;#34;argv[1] is now %s\n&amp;#34;, argv[1]); } // 将argv的一个元素赋值给states的一个元素  states[0] = argv[0]; printf(&amp;#34;states[0] is now %s\n&amp;#34;, states[0]); return 0; } 练习16：结构体和指向它们的指针  如何在栈上创建结构体，就像你创建任何其它变量那样？ 如何使用 x.</description>
    </item>
    
  </channel>
</rss>
