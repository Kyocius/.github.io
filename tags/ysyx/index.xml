<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ysyx on 游尔曼斯克</title><link>https://kyocius.github.io/tags/ysyx/</link><description>Recent content in ysyx on 游尔曼斯克</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 23 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kyocius.github.io/tags/ysyx/index.xml" rel="self" type="application/rss+xml"/><item><title>笨方法学 C 附加题不完全解答</title><link>https://kyocius.github.io/p/clang-review/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://kyocius.github.io/p/clang-review/</guid><description>&lt;img src="https://kyocius.github.io/p/clang-review/head.png" alt="Featured image of post 笨方法学 C 附加题不完全解答" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>其实笔者并不喜欢 C 语言，但是为了应试只能硬着头皮学了。&lt;/p>
&lt;p>笔者在复习 C 语言时，看到一本书叫《笨方法学 C》，其以练习题的方式串联起 C 语言的大致语法。&lt;/p>
&lt;p>本文尝试解答书后附加题，有的章节太简单就略过了。&lt;/p>
&lt;h2 id="练习10字符串数组和循环">练习10：字符串数组和循环&lt;/h2>
&lt;ol>
&lt;li>如何使用 &lt;code>,&lt;/code>（逗号）字符来在for循环的每一部分中，&lt;code>;&lt;/code>（分号）之间分隔多条语句？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>查询 &lt;code>NULL&lt;/code> 是什么东西，看看它会打印出什么？&lt;/li>
&lt;/ol>
&lt;p>在 C 语言中，NULL 是一个宏定义，通常用于表示指针不指向任何有效的对象或地址。NULL 的确切定义可能因编译器和平台而异，但通常它被定义为 &lt;code>(void *)0&lt;/code>，即一个转换为 &lt;code>void&lt;/code> 指针类型的零值。&lt;/p>
&lt;p>当你尝试打印一个指向 &lt;code>NULL&lt;/code>的指针时，结果会取决于你是如何打印它的。在 C 语言中，如果你使用 &lt;code>%p&lt;/code> 格式化标志（用于打印指针地址）和 &lt;code>printf&lt;/code> 函数，通常会打印出一个表示空指针的值，通常是 &lt;code>(nil)&lt;/code> 或者 &lt;code>0x0&lt;/code>，具体取决于编译器和平台。&lt;/p>
&lt;ol start="3">
&lt;li>看看你是否能在打印之前将 &lt;code>states&lt;/code> 的一个元素赋值给 &lt;code>argv&lt;/code> 中的元素，再试试相反的操作？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">states&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;California&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Oregon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Washington&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Texas&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将states的一个元素赋值给argv的一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 注意：这通常不是个好主意，因为argv通常不应被修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">states&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;argv[1] is now %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将argv的一个元素赋值给states的一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">states&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;states[0] is now %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">states&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="练习16结构体和指向它们的指针">练习16：结构体和指向它们的指针&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>如何在栈上创建结构体，就像你创建任何其它变量那样？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何使用 &lt;code>x.y&lt;/code> 而不是 &lt;code>x-&amp;gt;y&lt;/code> 来初始化结构体？&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>对于前两个问题其实非常好解答。只要把变量 &lt;code>x&lt;/code> 设置成非指针即可。&lt;/p>
&lt;ol start="3">
&lt;li>如何不使用指针来将结构体传给其它函数？&lt;/li>
&lt;/ol>
&lt;p>C 语言&lt;strong>不可能&lt;/strong>不使用指针传递结构体本身。所以这道题的意思就浅显地指，把参数的 &lt;code>*&lt;/code> 去掉你会不会&amp;hellip;&lt;/p>
&lt;h2 id="练习17堆和栈的内存分配">练习17：堆和栈的内存分配&lt;/h2>
&lt;blockquote>
&lt;p>对于现在你们这些年轻人来说，编程简直太容易了。如果你玩玩 Ruby 或者 Python 的话，只要创建对象或变量就好了，不用管它们存放在哪里。&lt;/p>
&lt;/blockquote>
&lt;p>理清内存最简单原则：如果你的变量并不是从 &lt;code>malloc&lt;/code> 中获取的，也不是从一个从 &lt;code>malloc&lt;/code> 获取的函数中获取的，那么它在栈上。&lt;/p>
&lt;ol>
&lt;li>&lt;code>strncpy&lt;/code> 有什么设计缺陷？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>strcpy&lt;/code> 函数不会向 &lt;code>dest&lt;/code> 追加 &lt;code>\0&lt;/code>，也就是字符串没有了结束，可能会造成内存非法访问。&lt;/p>
&lt;ol start="2">
&lt;li>C 如何打包结构体？结构体添加一些字段之后的新大小？&lt;/li>
&lt;/ol>
&lt;p>在 C 语言中，结构体的默认对齐方式通常是按照结构体成员中占用内存最大的数据类型进行对齐。这被称为“最大成员对齐”或“自然对齐”。&lt;/p>
&lt;p>结构体的总大小是其最大对齐成员的大小的整数倍。&lt;/p>
&lt;h2 id="练习18函数指针">练习18：函数指针&lt;/h2>
&lt;p>函数指针编写窍门：&lt;/p>
&lt;ul>
&lt;li>编写一个普通的函数声明：&lt;code>int callme(int a, int b)&lt;/code>&lt;/li>
&lt;li>将函数用指针语法包装：&lt;code>int (*callme)(int a, int b)&lt;/code>&lt;/li>
&lt;li>将名称改成指针名称：&lt;code>int (*compare_cb)(int a, int b)&lt;/code>&lt;/li>
&lt;/ul></description></item></channel></rss>