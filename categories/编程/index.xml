<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on 游尔曼斯克</title>
    <link>https://kyocius.github.io/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 游尔曼斯克</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Kyocius. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 02 Feb 2024 11:25:05 -0400</lastBuildDate><atom:link href="https://kyocius.github.io/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数电与计算机体系结构 01：入门</title>
      <link>https://kyocius.github.io/posts/ysyx/arch-book/arch-book-1/</link>
      <pubDate>Fri, 02 Feb 2024 11:25:05 -0400</pubDate>
      
      <guid>https://kyocius.github.io/posts/ysyx/arch-book/arch-book-1/</guid>
      <description>前言 此系列文章是《Digital Design and Computer Architecture: RISC-V Edition》的读书笔记。
数字抽象的深层含义 数字电路使用离散值，而物理值一般是连续的，所以电路设计者要想办法把离散值和连续值对应起来。
供电电压 零伏特电压一般指的是接地（GND）。从上世纪 70 年代起，供电电压从 5V 降到了 1.2V 以下。
逻辑电平 逻辑电平是指数字电路中电信号的电压水平，用于表示逻辑状态。在数字电路中，通常将电压分为两个离散的状态，分别代表逻辑值 0 和逻辑值 1。
噪声裕度 表示可以容忍的电压差值：
$$ NM_{L} = V_{IL} - V_{OL} $$ $$ NM_{H} = V_{OH} - V_{IH} $$
直流传输特性 将输入电压作为自变量，将输出电压作为因变量，抽象出一个函数。其形成的图像很有特点，叫作直流传输特性（DC Transfer Characteristics）。图像请参阅原书。
静态电路法则 静态电路法则要求，在给定逻辑上有效的输入情况下，每个电路元件都将产生逻辑上有效的输出。
为了提高生产力，诞生了四个逻辑家族：
 TTL CMOS LVTTL LVCMOS  </description>
    </item>
    
    <item>
      <title>笨方法学 C 附加题不完全解答</title>
      <link>https://kyocius.github.io/posts/ysyx/clang-review/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/ysyx/clang-review/</guid>
      <description>前言 笔者撰写本文时还在上大一，数据结构基础几乎为零，所以会有一些可笑的问题和不合时宜的吐槽。
本文尝试解答书后附加题，有的章节太简单就略过了。
练习10：字符串数组和循环  如何使用 ,（逗号）字符来在for循环的每一部分中，;（分号）之间分隔多条语句？  for (i = 0, j = 10; i &amp;lt; 10; i++, j--) 查询 NULL 是什么东西，看看它会打印出什么？  在 C 语言中，NULL 是一个宏定义，通常用于表示指针不指向任何有效的对象或地址。NULL 的确切定义可能因编译器和平台而异，但通常它被定义为 (void *)0，即一个转换为 void 指针类型的零值。
当你尝试打印一个指向 NULL的指针时，结果会取决于你是如何打印它的。在 C 语言中，如果你使用 %p 格式化标志（用于打印指针地址）和 printf 函数，通常会打印出一个表示空指针的值，通常是 (nil) 或者 0x0，具体取决于编译器和平台。
看看你是否能在打印之前将 states 的一个元素赋值给 argv 中的元素，再试试相反的操作？  #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { char *states[] = {&amp;#34;California&amp;#34;, &amp;#34;Oregon&amp;#34;, &amp;#34;Washington&amp;#34;, &amp;#34;Texas&amp;#34;}; // 将states的一个元素赋值给argv的一个元素  // 注意：这通常不是个好主意，因为argv通常不应被修改  if (argc &amp;gt; 1) { argv[1] = states[0]; printf(&amp;#34;argv[1] is now %s\n&amp;#34;, argv[1]); } // 将argv的一个元素赋值给states的一个元素  states[0] = argv[0]; printf(&amp;#34;states[0] is now %s\n&amp;#34;, states[0]); return 0; } 练习16：结构体和指向它们的指针  如何在栈上创建结构体，就像你创建任何其它变量那样？ 如何使用 x.</description>
    </item>
    
    <item>
      <title>写给 C# 开发者的 F# 光速入门教程</title>
      <link>https://kyocius.github.io/posts/fsharp-for-csharp-devs/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/fsharp-for-csharp-devs/</guid>
      <description>本文翻译自托管在 GitHub 上的 2fsharp 开源项目
译版仅发表在知乎和 本人博客 上，未经授权禁止转载
 这个教程是基于实例来讲解的，将会花费你 15-30 分钟的时间。
你将会学到 F# 这门语言 80% 的特性！
例 1：基本函数声明与实现 public int GiveMeTheLength(string input) { // 单行注释  var result = input.Length; /* 多行注释 */ return result; } 变成了
let GiveMeTheLength(input) = // 单行注释  let result = input.Length (* 多行注释 *) result  所有东西都是默认为 public 的，除非你显式声明 private 修饰符。 关键字 var 变成了 let（不仅仅用来声明变量，还用来声明函数）。 你不再需要 return 关键字。函数的最后一行就是返回值。 不再需要花括号，使用 4 格（或者 2 格）缩进，就像 Python 一样。 不再需要分号来标志一行结束。 类型声明是可选的，除了极少数情况编译器无法推断类型。 单行注释和 C# 相同，但是多行注释使用括号而不是斜杠。  如果你想要声明类型，需要这样写：</description>
    </item>
    
    <item>
      <title>C# 进阶小册  01 - 并发与异步</title>
      <link>https://kyocius.github.io/posts/dotnet/advanced-csharp-1/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/advanced-csharp-1/</guid>
      <description>前言 就是太久没写异步，有的用法忘了。所以写篇博客回顾一下。
线程 Thread 虽然在 C# 中 Task 的使用频率远超直接使用线程，但是有关线程的概念还是要复习一下的。
才不是因为我全忘了
创建线程 Create a Thread using System; using System.Threading; var t = new Thread(WriteY); t.Start(); for (var i = 0; i &amp;lt; 1000; i++) { Console.Write(&amp;#34;x&amp;#34;); } void WriteY() { for (var i = 0; i &amp;lt; 1000; i++) Console.Write(&amp;#34;y&amp;#34;); } //输出： xxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyy... xxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyy... xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyy... yyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxx... 我们可以通过 Name 属性来访问线程的名字：
WriteLine(Thread.CurrentThread.Name); Join 与 Sleep 你可以使用 Join 方法来等待线程结束：
Thread t = new Thread(Go); t.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 03 - 深入流的创建</title>
      <link>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-3/</link>
      <pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-3/</guid>
      <description>前言 之前我们见识了 Rx.NET 的基本用法，把 .NET 事件转化成了可观察数据流，并且补充了一些拓展知识（Ex），现在我们要接着深入 Rx.NET 的核心技术了。
普通数据流 还记得吗，IObservable 接口只有一个方法 Subscribe，是 Rx.NET 的基础。
我们将试着打造一个即时通讯系统。
实现 IObservable 接口 在实际的开发中，非常不推荐直接实现 IObservable 接口，但是理解这个流程对我们的学习很有帮助。
using System; using System.Reactive.Disposables; public class NumbersObservable : IObservable&amp;lt;int&amp;gt; { private readonly int _amount; public NumbersObservable(int amount) { _amount = amount; } public IDisposable Subscribe(IObserver&amp;lt;int&amp;gt; observer) { for (int i = 0; i &amp;lt; _amount; i++) { observer.OnNext(i); } observer.OnCompleted(); return Disposable.Empty; } } 实现 Observer 接口 public class ConsoleObserver&amp;lt;T&amp;gt; : IObserver&amp;lt;T&amp;gt; { private readonly string _name; public ConsoleObserver(string name=&amp;#34;&amp;#34;) { _name = name; } public void OnNext(T value) { Console.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 Ex - 函数式思想 &amp; 流式接口</title>
      <link>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-ex/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-ex/</guid>
      <description>前言 这一章是独立于正式章节的番外，补充一下 C# 函数式编程（Functional Programming）以及流式接口（Fluent API）的知识。
等等，我们不是在学 Rx.NET 吗，怎么又跑到函数式了？ (＃°Д°)
你 先 别 急，二者并不冲突。
Rx.NET 提供的方法大部分都是函数式的，比如我们上一章学到的 FromEventPattern 方法，就是一个高阶函数（High-Order Function），因为它的参数也是函数。
有些老古董 Java 程序员认为，C# 和 Java 一样都是纯面向对象语言（Pure OOP），这是完全错误的。经过二十年的发展，C# 早已进化成一门多范式语言了。
函数式编程 那么如何用 C# 编写函数式代码呢？
回顾一下基础知识吧。
委托 Delegate 为了传递函数，C# 老早就加入了委托特性：
public delegate bool MyDelegateType (string first, string second); 在上面的代码中，我们创建了一个名为 MyDelegateType 的委托类型。
我们这样为委托赋值：
MyDelegateType myDel; myDel += &amp;lt;一些函数&amp;gt;; myDel(&amp;#34;first&amp;#34;, &amp;#34;second&amp;#34;); // 这样调用 匿名方法 Anonymous methods myDel = delegate (string first, string second) { return first.Length == second.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 02 - 基本使用</title>
      <link>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-2/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-2/</guid>
      <description>前言 在上一章里，我们学习了响应式的基本概念。在这一章节，我们将编写一个股票监控程序。首先我们将使用传统的 .NET 事件系统来写一次，之后再通过 Rx 来重构。
传统事件写法  先编写一个类，其中只有一个事件属性：  class StockTicker { public event EventHandler&amp;lt;StockTick&amp;gt; StockTick; } 编写一个类包含我们的数据：  class StockTick { public string QuoteSymbol { get; set; } public decimal Price { get; set; } } 创建一个类来监听变化，并订阅事件：  class StockMonitor { public StockMonitor(StockTicker ticker) { ticker.StockTick += OnStockTick; // OnStockTick 注册事件  } ... } 因为我们需要比较股票价格的变化，所以我们可以通过字典来存储先前的股票数据。编写一个新类：  class StockInfo { public StockInfo(string symbol, decimal price) { Symbol = symbol; PrevPrice = price; } public string Symbol { get; set; } public decimal PrevPrice { get; set; } } 之后你可以在 StockMonitor 中声明一个 StockInfo 类型的属性。</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 01 - 基础概念</title>
      <link>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-1/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/rx-magic/rx-magic-1/</guid>
      <description>前言 最近刚读了 Rx.NET in Action，学到的新概念非常多，担忧自己会日渐遗忘，觉得有必要写一篇博客记录一下，说不定也能帮到一些志同道合的朋友。
本系列将会使用我深爱的 C# 语言和 Rx.NET 框架来讲解响应式编程（Reactive Programming）的魔法 ╰(°▽°)╯
背景知识  C# 中的委托、泛型、事件以及 LINQ 等概念 Rx = Reactive Extension Rx 是由微软旗下一个实验室发起的 巨硬大法好  响应式概念 Rx 到底是干啥的？
首先来看看微软的解释：Rx = Observables + LINQ + Schedulers。谔谔，啥玩意儿？
那看看大佬怎么解释的吧：Rx = 处理异步数据流。这个解释还行，但还是不明白。
这里是更通俗的解释：
var a = 1; var b = 2; var c = a + b; // c 的值显然为 3 当你改变 a 或者 b 值的时候，按照我们以前的思维，c 的值并不会随之发生变化。
如果我们想要 c 的值随之而改变呢？很简单，快快使用 Rx！
可观察对象 Observable public interface IObservable&amp;lt;T&amp;gt; { IDisposable Subscribe(IObserver&amp;lt;T&amp;gt; observer); }  接口只有一个方法 Subscribe，返回 IDisposable 对象（代表着订阅事件本身） Observable 持有 Observer 的集合，在值改变时随时通知它们 IDisposable 对象可以通过 Dispose 方法随时取消订阅  观察者 Observer 观察者的源码其实也很简单。</description>
    </item>
    
  </channel>
</rss>
