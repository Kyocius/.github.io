<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 游尔港</title>
    <link>https://kyocius.github.io/posts/</link>
    <description>Recent content in Posts on 游尔港</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Kyocius. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Fri, 06 Sep 2024 00:28:00 +0800</lastBuildDate><atom:link href="https://kyocius.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>潦草 PKU 区块链备忘录（下）</title>
      <link>https://kyocius.github.io/posts/pku-blockchain/2024-09-06-pku-eth/</link>
      <pubDate>Fri, 06 Sep 2024 00:28:00 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/pku-blockchain/2024-09-06-pku-eth/</guid>
      <description>状态树 概念 Merkle Patricia Tree：结合了 Merkle Tree 和 Patricia 前缀树。 Patricia 前缀树：压缩前缀树，可以高效存储和检索键值对。 例如，如果两个字符串 &amp;ldquo;apple&amp;rdquo; 和 &amp;ldquo;apricot&amp;rdquo; 的前缀 &amp;ldquo;app&amp;rdquo; 相同，它们就会被压缩到同一个节点中，该节点只存储 &amp;ldquo;app&amp;rdquo;，然后分别指向 &amp;ldquo;le&amp;rdquo; 和 &amp;ldquo;ricot&amp;rdquo; 的子节点。
GHOST GHOST（Greedy Heaviest Observed Subtree） 协议是对传统最长链规则的改进。它决定主链的方式不同，不仅仅基于链的长度，还要基于链的“重量”（即考虑链上包含的所有块的总和，包括叔块）。
以太坊中的实现 叔块奖励 如果叔块被包含在主链中，它们的创建者可以获得较少于正常区块的奖励。此外，包含叔块的区块创建者也会得到奖励。
叔块的要求 叔块必须是与主链具有共同祖先的块，并且必须在一定深度内（即与当前区块不超过 7 个区块距离）。
智能合约 概念 智能合约保存了合约当前的运行状态：
balance：当前余额 nonce：交易次数 code：合约代码 storage：存储，使用 MPT 数据结构 Solidity 是最常用的语言，类似 JavaScript。其脚本一般具备以下结构：
pragma solidity ^0.4.xx; contract SimpleAuction { address public beneficiary; unit public auctionEnd; address public highestBidder; mapping(address =&amp;gt; uint) bids; address[] bidders; } </description>
    </item>
    
    <item>
      <title>潦草 PKU 区块链备忘录</title>
      <link>https://kyocius.github.io/posts/pku-blockchain/2024-08-26-pku-btc/</link>
      <pubDate>Mon, 26 Aug 2024 14:19:05 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/pku-blockchain/2024-08-26-pku-btc/</guid>
      <description>不要被学术思维或是程序员思维限制创造力。
密码学基础 哈希函数的三个特点：
单向性（One-Wayness）：$X \rightarrow H(X)$。 唯一性（Uniqueness）：$X$ 只对应一个 $H(X)$。 抗碰撞性（Collision Resistance）：不存在 $H(X) = H(Y)$。 数据结构 最重要的哈希树（Merkle Tree）结构。
区块链实现 UTXO（Unspent Transaction Output）：所有没被花掉的交易的输出。全节点要在内存中维护 UTXO，以便快速检验是否存在 Double Spending。
网络 比特币网络使用 P2P 和 TCP，便于穿透防火墙。 比特币对区块有 1M 字节的限制。 挖矿难度 挖矿原理：$$ Hash(Block \ Header) \leq Target $$
比特币采用 SHA-256 算法，也就是说目标值有 $2^{256}$ 个取值。
挖矿难度：$$ Difficulty = \frac{Difficulty^{=1} \ Target}{Target} $$
限制出块时间。出块时间太短：容易改链。
比特币规定每隔 2016 个区块要调整阈值。目标阈值迭代更新方法：
$$ Target=Target \times \frac{Actual \ Time}{Expected \ Time} $$
$$ Expected \ Time = 2016 \times 10 \ min/block $$</description>
    </item>
    
    <item>
      <title>两只麻雀</title>
      <link>https://kyocius.github.io/posts/casual-writting/2024-08-03-two-sparrow/</link>
      <pubDate>Sat, 03 Aug 2024 20:36:00 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/casual-writting/2024-08-03-two-sparrow/</guid>
      <description>走廊尽头，靠近窗户的一隅，是我的房间， 今早不知如何，飞进两只麻雀。
一只麻雀仿佛在控诉，不停地撞击玻璃，想飞上镜花水月般的枝丫； 另一只受到了莫大的惊吓，躲进了洗手台的角落，发出微弱的呢喃。
积灰的米黄色地板此时散落着麻雀的绒毛和白羽， 可想而知，这场努力落得多狼狈。
我被这撞击与啼叫吵醒，不耐烦地找寻噪音的源头。伸手抓走这两只可怜虫，将它们推搡着，轰出房间。 随手把门带上，免得再听见它俩的哀鸣。
我不知道两只麻雀为何不请自来，钢筋水泥的楼宇不可能有它们的容身之处。 也许只是因为一次道路的选择、一次误判，或者说一次阴差阳错，导致了它们可能有去无回的光顾。 我确信其中一只麻雀的翅膀已经折断，此生可能无法再伸展羽翼。
关上房门后，这件事像褪色一般，被我淡忘。
7 月 27 号中午下了场大雨，乌云黑压压的将光线遮蔽。房间里暗得像午夜。 我撑着伞走到宿舍门的连廊前，看见了一团棕色的、像抹布似的东西。
湿漉漉的麻雀，躺在积水的地砖上。另一只麻雀不知所踪。我没有仔细看，可以说是不想去看。 毕竟比起糟心的脏乱，烦躁的现实有更多事值得内耗。
雨下的很大，伞在风和雨的蹂躏下，显得快要如琴弦绷断一般。我快步走着，被积水浸湿了鞋。
一只麻雀找到了离开的路，却倒在了滂沱大雨中。
雨一直到傍晚也没有停歇。</description>
    </item>
    
    <item>
      <title>2024 夏日谈</title>
      <link>https://kyocius.github.io/posts/casual-writting/2024-summer-holiday/</link>
      <pubDate>Tue, 25 Jun 2024 00:35:00 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/casual-writting/2024-summer-holiday/</guid>
      <description>6 月 24 日 推进雅思英语词汇，用的不背单词。还差正好 2000 个。
重新学一遍线性代数，用的 3B1B 线性代数本质，看到 8/16，Manim 真是神奇。
两个学期下来太狗屎了，没时间好好学，狗屁应试。考前挑着看了经典 MIT 线性代数系列，速通成功。虽然到最后 Jordan 标准型的类型题一半不会写，Hermite 矩阵是啥也忘了，Hamilton-Cayley 定理正好没复习。
培养方案真是误人子弟。勉强及格的话，绩点就会完蛋。大学的实验班太脑瘫了，不适合我。急需实习挣钱，别说暑研了，就算申上暑研，路费都出不起。所以需要学习更多 CS 技能。
走学院派路线太死板了。我知道那些公开课是好课。但这又非常矛盾，实验班课程难度更大，想获得好看的绩点和排名需要下苦功夫，而我又不想在 EE 上浪费太多时间。
与其责备自己，不如批判他人，拒绝情绪低迷。
还是想办法找到实习挣钱要紧。明天重新入门 React，我们的老朋友。
6 月 25 日 蛋总深夜找我，大家都遇到了一些苦难。但我相信眼前的挫折如果放大到人生的尺度上根本不算什么。就算只是小小的波动，每一处壁垒并非难以逾越。
推进雅思英语词汇，还剩 1985 个，复习了很久。
3B1B 的线性代数看完了（16/16）。
最后看了一下 Deep Learning 和 Data Analysis 的学习路径，感觉和自己在 CIS 课上学的差不多，应该算是有基础了，该搞点项目出来丰富一下履历。
React 还没碰，但是应该不急。
6 月 26 日 推进雅思英语词汇，还剩 1965 个。
投递了三份简历，没有抱太大期望。继续探索可能性。
一整天做的事情很少，看了很久狐妖小红娘，温故。
遇到了不少糟糕的事，家庭上的、人际上的，感觉现在的环境很 toxic，急需改变。我不该和他们呆在一起。氛围很差，空气里弥漫的都是负能量。我觉得我比他们强，并非应试的，而是综合素质：从英语，到 CS 技能，再到沟通能力。这点在我看到舍友邋遢的生活态度后更加笃定无疑。
我总是浸溺在懊悔和遗憾的沉重之中。我不该在这里，而他们设置的条条框框毫无意义。凭什么我不能拥有风花雪月？明明世界的大门在向我敞开。如果家庭条件再富裕一点就好了。
对广东充满滤镜。一是因为那里是我的故乡，二是我所期待的邂逅在广东发生的概率更大。我讨厌迂腐和陈旧的城市，哪怕是冠以“文化遗产”，我依然视之糟粕。每每路过胡同或者苏联时的破楼，我心里总会泛起恐惧，害怕被他们的黯淡吞噬。
逃离的愿望愈发强烈。
6 月 27 日 推进雅思英语词汇，还剩 1945 个。</description>
    </item>
    
    <item>
      <title>近况，困顿与精神符号</title>
      <link>https://kyocius.github.io/posts/casual-writting/2024-04-02-confusion/</link>
      <pubDate>Tue, 02 Apr 2024 14:13:00 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/casual-writting/2024-04-02-confusion/</guid>
      <description>大学生活没有想象中美好。形式的、毫无意义的活动和报告，在侵蚀我的热情，虽然我早知会如此。从前那些不以为意的选择和肤浅的见解，在这段时间成为了箍紧我的枷锁。我很不愿意承认自己会因为一些小事大发牢骚，但往往心中裂痕淌出的水滴，会在种种现实的挫伤下，变成决堤的洪流。
我想，是时候梳理这股无谓的洪流了。
上学期挂了学分最高的数学分析，下学期经过补考 GPA 能开出 3.66 但是均分依然很低，说实话我依然在疑惑这个绩点如何换算来的，比预期高很多。但在这所谓的○班里，GPA 比我高的比比皆是。在上大学之前我就拜读过 《上海交通大学生存手册》进而得知绩点不应该是大学生活的圭臬，这反而成为了深夜的自我安慰剂，每次摆烂后扎入皮肤，一瞬间「毕竟绩点才不是我所追求的」之类的话随着血液涌上脑海。但事实上我除了在内耗和摸鱼之间反反复复之外，真正学的东西少之又少。
如果再往思维的更深处挖去，我发现是我那可怜又可笑的虚荣心。从小到大，自认为素养不低、读书不少，但我那如同木制高台的价值观依然建立在物欲与攀比的淤泥里。人人都想要高绩点，但无非是为了更好的升学，升入更高档次的学府，获得更高档次的工作。但越是跟随这实验班的培养方案学习，我越是觉得自己不是学院想要的那类「数理人才」，名为计算机拔尖班却将 CS 课程推后，也发现了通信没有想象中感兴趣。重视基础学科教育并没有问题，但这好像也阻挠了○班学生出去实习的可能性，毕竟科研和工业界大相径庭。头部的学生依然如鱼得水、潇洒自如，着实令我自惭形秽。
每至深夜，「我到底想要什么？」的疑问在脑海里挥之不去。我说我想要他人的羡艳的目光，那为什么当初不选择诸如武大南开之类的综合名校？我又说我想要成为享誉学术界的大拿，那为什么连基础课程的均分都达不到，而且是已经身在被制裁的院校？后来我发现我真正喜欢的安逸的氛围，想去美国的原因只是因为迟先生所在的 CMU 这类名校。我也只能叹息每个选择都和家庭紧密相关。人在不得志的时候会郁郁反其本，此话不假。我明明站在向前的单行道上，却依然踌躇四顾。
我需要一个精神符号。那种能推着你走的，偶像似的符号，又或者那种可以带给人强烈归属感的符号。我有次听到中国人民大学哲学院的副教授王小伟说：「符号是具有魔力的，符号可以产生价值。」我在知乎上刷到一位 Blackmore 信通院学长，因为 10043 法令只能放弃了 Columbia 的录取，去 CUHK 做了两年 RA，在 Edinburgh 又读了两年 MRes。最后成功申请到了 Cambridge 的 PhD，却又因为 ATAS 没过，再次被拒之门外。先不论我能否达到学长的成就，单是看到他被如此对待就不免心痛，如果他能一路顺遂，能取得世俗意义上更大的成功。不过从他的动态中看出，他好像已找到了另外一条路留在英国，并且过得很开心。
也许我也能找到自己的路吧。我总想活在他人的荫蔽下，走别人踩过的道路，认为前人能一路披荆斩棘，我也定能过关斩将。但我和他人的家庭条件、心理状态、抗压能力以及机遇又能一样吗？我以前总以为自己收集信息的能力很强，可以自己区别利弊、规避风险。但当我回头看的时候，留给我已经没有多少选择了。
对于现实的动力，大概就是攒钱去加拿大吧。现在的梦校就是 Waterloo 和 UBC，并且想去一些小而美的初创公司干活，成为更有趣的人。不过等我毕业的时候，世界又是什么格局，会不会形成更深的沟壑，又有谁会知道呢？
发现自己开始对 Blues 和 Neo R&amp;amp;B 着迷，有时候看着王家卫拍的电影出神。那种朦胧的、梦幻的音乐，抽帧的、缀以暗色的场景，可能正影射着我对当下的印象吧。也许会被旁人骂成赛博文青，但对我来说已毫无所谓。
从前我是不相信 MBTI 的，因为人，尤其是人的思维，是无法用简单几十道直白的 quiz 来定义的。我曾把这句话告诉了当时正在追求的女孩，现在想来真是蠢到极致，和自己没有太多共鸣的人聊天，大部分时间都是我在迎合，很累且无益。不过我更加确信了我是一个外表热情乐观洋溢，实则容易阴郁和自弃的人格。我也认定自己虽看惯卑劣和老旧，内心仍不舍浪漫主义。我觉得这会是日后我与众人的不同。
言尽于此，祝我的未来无限可能、步入正轨，也祝各位看客生活美满幸福。</description>
    </item>
    
    <item>
      <title>笨方法学 C 附加题不完全解答</title>
      <link>https://kyocius.github.io/posts/chip-design/clang-review/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/chip-design/clang-review/</guid>
      <description>前言 笔者撰写本文时还在上大一，数据结构基础几乎为零，所以会有一些可笑的问题和不合时宜的吐槽。
本文尝试解答书后附加题，有的章节太简单就略过了。
练习10：字符串数组和循环 如何使用 ,（逗号）字符来在for循环的每一部分中，;（分号）之间分隔多条语句？ for (i = 0, j = 10; i &amp;lt; 10; i++, j--) 查询 NULL 是什么东西，看看它会打印出什么？ 在 C 语言中，NULL 是一个宏定义，通常用于表示指针不指向任何有效的对象或地址。NULL 的确切定义可能因编译器和平台而异，但通常它被定义为 (void *)0，即一个转换为 void 指针类型的零值。
当你尝试打印一个指向 NULL的指针时，结果会取决于你是如何打印它的。在 C 语言中，如果你使用 %p 格式化标志（用于打印指针地址）和 printf 函数，通常会打印出一个表示空指针的值，通常是 (nil) 或者 0x0，具体取决于编译器和平台。
看看你是否能在打印之前将 states 的一个元素赋值给 argv 中的元素，再试试相反的操作？ #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { char *states[] = {&amp;#34;California&amp;#34;, &amp;#34;Oregon&amp;#34;, &amp;#34;Washington&amp;#34;, &amp;#34;Texas&amp;#34;}; // 将states的一个元素赋值给argv的一个元素 // 注意：这通常不是个好主意，因为argv通常不应被修改 if (argc &amp;gt; 1) { argv[1] = states[0]; printf(&amp;#34;argv[1] is now %s\n&amp;#34;, argv[1]); } // 将argv的一个元素赋值给states的一个元素 states[0] = argv[0]; printf(&amp;#34;states[0] is now %s\n&amp;#34;, states[0]); return 0; } 练习16：结构体和指向它们的指针 如何在栈上创建结构体，就像你创建任何其它变量那样？ 如何使用 x.</description>
    </item>
    
    <item>
      <title>2023 当我谈论高中时</title>
      <link>https://kyocius.github.io/posts/casual-writting/memory-graduation-2023/</link>
      <pubDate>Mon, 19 Jun 2023 19:36:00 +0800</pubDate>
      
      <guid>https://kyocius.github.io/posts/casual-writting/memory-graduation-2023/</guid>
      <description>楔子 我曾不止一次在傍晚的晚自习课上，倏地意识游离，心思飘渺到了未来。幻想着那场考试后的心情与生活如何如何，幻想着不再受约束时又该时怎样欢欣。
但等到真正经历后，却又出乎意料地平静。那些看似熬不到头的日子戛然而止，像是一根突然绷断的琴弦。同学们的欢笑、物理老师的提问，仿佛还流连在昨天，如同校园的秋桐叶飘落在湖边的水面上，漾起卷卷波纹。
请原谅我的无病呻吟吧，看在这是一个乳臭未干的小子，头一回经历的份儿上。
高考 很遗憾，我没能成熟到可以风轻云淡地面对它。
由于我的选科是物化地，所以我需要从高考第一天坚持到最后一刻。天气很热，即使躲在树荫之下，也能感受到滚滚热浪。
具体的细节我也记不太清了，只能回想起考场刺耳的铃声和察觉不到语调的人声播报。
值得一提的数学考试。今年的数学远超我的能力所及。无论是数列还是导数，我仅能答出第一二小问。看一眼窗外，进考场前的艳阳天突然转而雷鸣，唰啦啦下起暴雨来。我的心情也从不可思议、焦虑紧张，到最后的坦然接受。
不过好在总体分数上不太难看，算是被英语和语文拯救的水平。
抉择 分数出来后，便是考虑志愿的事情。从小学五年级时起我便坚定地要学计算机，所以志愿无非就是把国内的 CS 排名一拉，分数从高到低排序罢了。不过鉴于国内的升学压力越来越紧张，我个人也倾向于提供保研选项的院校。
最后也是顺利地被某校的计算机录取了。确实 10043，确实去不了美国。和家里人聊了聊经济状况，父母虽然支持但也无能为力。
我也仔细想过为什么想去美国。大概也是为了满足我的虚荣心，觉得赴美就能离迟先生那类精英更近些吧。
同窗们 高中三年里，着实遇到了各型各色的人物，虽然偶尔小有摩擦，但多数的记忆是快乐而明媚的。为了保护他们的隐私，下文均用化名。
夏天 夏天是我在选完科目重新分班后认识的，也是对我影响最大之人。他身高体胖、身形壮硕，留着不长不短的寸头，肤质不佳，脸上总不时冒出小白珠。和我一样戴着黑色拉丝的半包边眼镜。若仅从外形而误认为他是个粗犷的人，着实是大错特错。
他极爱看书。仅从我的印象中，他在学校里就读完了东野圭吾的《恶意》《秘密》，阿西莫夫的《银河帝国》系列，菲利普的《仿生人会梦见电子羊吗》以及埃里希的《西线无战事》。他读过的绝不止我忆起来的这些。从古典文学到科幻小说，他都网罗一通。他亦是极护书的，看完的书总是小心翼翼地收藏好。书不轻易外借，若是我们把他的书不小心折了角抑或是划了痕，他便面有愠色。他的读书品味也影响了往后我对书籍的选择。
夏天又是位个性十足的人。上一秒还在开怀大笑，下一秒就突然神色黯淡，陷入沉思，对谁也爱答不理。若问及原因，他说「突然觉得好没意思」。每次遇见这种情况，我便总拿一些烂梗来逗他。对我来说，这样的日子绝不算无趣。他的性格直率，从不忌惮什么，却能让人感觉到他的情商很高。刚和他结识确实会被他的某些话语中伤，但我的一些坏习惯也是在这种直言中才改进的。
夏天的成绩亦是极好的，属于那种不怎么学、很轻松，也能拿到好成绩的类型，这点令我难以望其项背。平时还玩原神（好像改玩星铁了），也算是被我抓住了的话柄，常拿这点来戏弄他。数学不怎么优秀，但对于地理、物理和语文很是拿手。他的眼界开阔，关注时事，对于事物总有自己的独到见解。我和他总有聊不完的话题。
我和夏天谈不上管鲍之交，更谈不上伯牙子期云云。但能在高中三年里结识这样一个趣味相投的人，着实是一大幸事。
明哲先生 我管明哲叫「先生」其实是在挖苦他，因为他确实令我心生厌恶。他完美地符合我对小镇做题家的刻板印象。
我和他在高一上学期就分在了一个班。大概是因为高度近视的缘故，他的眼睛硕大而突出，上唇长着浓密的胡须，永远不剃。总是自认为幽默，爱接别人下茬。笑不露齿，并发出令人烦躁的「嘻嘻」声，上唇的小胡子翘起，油腻腻的像一片黑云，标致极了。
他何以得到「先生」的美称呢？其实有两个缘故。
一是他的成绩确实优秀，常常在全校排名第一。正如他在某次竞选中所言：「在高中三年里，我包揽了全校大部分第一以及联考第一，拥有大联考状元的称号。」也真不愧于他来自衡水的籍贯。
二是因为他的自私自利、自以为是。临近高考，教室内将近 30°C。可是他却因为担心感冒影响考试发挥，总是关掉他头顶上的两盏风扇。做罢，还向同学们双手合十，翘起他的胡子，摆出道歉的表情。同时，他向班主任吹风，要求调高空调温度。要知道，很多同学吹不着风扇、空调，一堂课下来都是汗流浃背。
他偏爱足球，但是人菜瘾大。哪个队伍若是分到了他，整节体育课只有叹气的份儿。他过人爱用踩单车，不过在旁人看来像是老水牛拉车，慢到家了。若是把球传给他，他会负责地把球带到对方边线，然后出界，将球权拱手相让。届时，他会说「状态不好」「太久没踢了」之类的话，操场霎时充满了快活的气息。
他与另外一个男生卿卿我我、搂搂抱抱，上厕所都形影不离的恶心事我不愿再写，徒增反胃。我敢断言他日后会成为出色的学者或者科学家，只是这样的人我今生不愿再遇见第二个。
陈瑞 陈瑞是我们学校入学时的第一名，也是极为优秀的一个人。他个子很高，身材精瘦，皮肤白皙，戴着金色的圆框眼镜，一副文弱书生的模样。与明哲先生不同，他从未以自己的成绩傲人。
他总是真诚地夸赞别人，发现别人好的一面；对于别人的缺点，委婉地提出自己的意见，让人时刻能感受到他言语中的细腻。这让我与他的相处十分愉快。
与夏天类似，他也同样博览群书、文采斐然。他偏爱现代文学，喜欢抒情的文字。有时读着读着，情到深处，还会眼眶湿润，潸然落泪。他在周五下午便能写完绝大部分作业，然后在周末捧着自己心爱的书通宵读之，成绩却依旧名列前茅，让我望洋兴叹。
他的视野更是开阔，上知天文、下知地理。对于一些社会现象，我们总有相同的观点和看法。令我印象深刻的是，对于某些事物其实他早已了如指掌，但出于对他人的尊重，他总是装作不懂的样子，恭敬地听别人讲完，随后再表达自己地看法。其心智之成熟令我深受震撼，也促使我改变了自己接人待物的态度。同时，他还是位资深二刺螈（无贬义），新番无所不追。印象里，他常常提起《路人女主》里的加藤惠。
他曾和我说过，其实他也会自卑和敏感。曾给向往的女生写了情书，却被无情扔掉。这让我们产生了更多共鸣。想不起哪个人说过，只有将内心的柔软暴露给你，才算真正的交心。和陈瑞的相识，也是我的幸运，让我见识了双商都高的人的真正形象。
大宝和润仔 若是论同学中感情最深的，莫过于大宝和润仔了。大宝和润仔是我从初中开始就在一个班的旧相识。
大宝身材有些虚胖，硬要我比喻起来，他有点像动画《降世神通：科拉传奇》中的 博林（Bolin）。「大宝」这个戏称其实是我起的，因为他的头像是游戏《三国杀》里的徐胜（其实我从没玩过，只是这个角色在我们班格外的火）而且 ID 叫作「开心大宝」。
在初一时，他的脾气很差。我印象中，他总是和别人不对付。初二时因为学籍的问题，他被退回原籍河北张家口读了半年。等到再见时，感觉他性情大变。变得更加成熟稳重，也更加郁郁寡欢了，仿佛心里压着千斤重的担子。不过上了高中，我们又被分到同一个班，情况就好转了很多，常常能听见他在课间忘我地开怀大笑。偶尔也会拉上我，跑去学校的超市买零食，然后等到快上课时再不慌不忙地走回教室。
也正如他的外号，他后来给人的印象就是憨厚大方。他有零食的时候，定会分给目光所及的所有人。在毕业聚会上，他还说，以后关于牙齿的事他全包了（大宝最后去学了口腔医学 5+3）。
润仔给人的印象就是沉默而内向。他皮肤黝黑，身材瘦高。性格温良，总是给人踏实的感觉，老师应该很信任他。
后记 无论如何，我祝愿我的朋友都幸福美满。也许会有更多挫折等着我。但人总要经历的。乐观也好，悲观也罢，日子会过去。而过去的将再无机会重来。</description>
    </item>
    
    <item>
      <title>写给 C# 开发者的 F# 光速入门指南（译）</title>
      <link>https://kyocius.github.io/posts/dotnet/fsharp-for-csharp-devs/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/fsharp-for-csharp-devs/</guid>
      <description>本文翻译自托管在 GitHub 上的 2fsharp 开源项目
译版仅发表在知乎和 本人博客 上，未经授权禁止转载
这个教程是基于实例来讲解的，将会花费你 15-30 分钟的时间，你将会学到 F# 这门语言 80% 的特性！
例 1：基本函数声明与实现 public int GiveMeTheLength(string input) { // 单行注释 var result = input.Length; /* 多行注释 */ return result; } 变成了
let GiveMeTheLength(input) = // 单行注释 let result = input.Length (* 多行注释 *) result 所有东西都是默认为 public 的，除非你显式声明 private 修饰符。 关键字 var 变成了 let（不仅仅用来声明变量，还用来声明函数）。 你不再需要 return 关键字。函数的最后一行就是返回值。 不再需要花括号，使用 4 格（或者 2 格）缩进，就像 Python 一样。 不再需要分号来标志一行结束。 类型声明是可选的，除了极少数情况编译器无法推断类型。 单行注释和 C# 相同，但是多行注释使用括号而不是斜杠。 如果你想要声明类型，需要这样写：</description>
    </item>
    
    <item>
      <title>看看 C# 比较高级的特性</title>
      <link>https://kyocius.github.io/posts/dotnet/advanced-csharp/</link>
      <pubDate>Mon, 15 Aug 2022 12:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/advanced-csharp/</guid>
      <description>前言 就是太久没写异步，有的用法忘了。所以写篇博客回顾一下。
线程 Thread 虽然在 C# 中 Task 的使用频率远超直接使用线程，但是有关线程的概念还是要复习一下的。
才不是因为我全忘了
创建线程 Create a Thread using System; using System.Threading; var t = new Thread(WriteY); t.Start(); for (var i = 0; i &amp;lt; 1000; i++) { Console.Write(&amp;#34;x&amp;#34;); } void WriteY() { for (var i = 0; i &amp;lt; 1000; i++) Console.Write(&amp;#34;y&amp;#34;); } //输出： xxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyy... xxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyy... xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyy... yyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxx... 我们可以通过 Name 属性来访问线程的名字：
WriteLine(Thread.CurrentThread.Name); Join 与 Sleep 你可以使用 Join 方法来等待线程结束：
Thread t = new Thread(Go); t.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 03 - 深入流的创建</title>
      <link>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-3/</link>
      <pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-3/</guid>
      <description>前言 之前我们见识了 Rx.NET 的基本用法，把 .NET 事件转化成了可观察数据流，并且补充了一些拓展知识（Ex），现在我们要接着深入 Rx.NET 的核心技术了。
普通数据流 还记得吗，IObservable 接口只有一个方法 Subscribe，是 Rx.NET 的基础。
我们将试着打造一个即时通讯系统。
实现 IObservable 接口 在实际的开发中，非常不推荐直接实现 IObservable 接口，但是理解这个流程对我们的学习很有帮助。
using System; using System.Reactive.Disposables; public class NumbersObservable : IObservable&amp;lt;int&amp;gt; { private readonly int _amount; public NumbersObservable(int amount) { _amount = amount; } public IDisposable Subscribe(IObserver&amp;lt;int&amp;gt; observer) { for (int i = 0; i &amp;lt; _amount; i++) { observer.OnNext(i); } observer.OnCompleted(); return Disposable.Empty; } } 实现 Observer 接口 public class ConsoleObserver&amp;lt;T&amp;gt; : IObserver&amp;lt;T&amp;gt; { private readonly string _name; public ConsoleObserver(string name=&amp;#34;&amp;#34;) { _name = name; } public void OnNext(T value) { Console.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 Ex - 函数式 &amp; 流式接口</title>
      <link>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-ex/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-ex/</guid>
      <description>前言 这一章是独立于正式章节的番外，补充一下 C# 函数式编程（Functional Programming）以及流式接口（Fluent API）的知识。
等等，我们不是在学 Rx.NET 吗，怎么又跑到函数式了？ (＃°Д°)
你 先 别 急，二者并不冲突。
Rx.NET 提供的方法大部分都是函数式的，比如我们上一章学到的 FromEventPattern 方法，就是一个高阶函数（High-Order Function），因为它的参数也是函数。
有些老古董 Java 程序员认为，C# 和 Java 一样都是纯面向对象语言（Pure OOP），这是完全错误的。经过二十年的发展，C# 早已进化成一门多范式语言了。
函数式编程 那么如何用 C# 编写函数式代码呢？
回顾一下基础知识吧。
委托 Delegate 为了传递函数，C# 老早就加入了委托特性：
public delegate bool MyDelegateType (string first, string second); 在上面的代码中，我们创建了一个名为 MyDelegateType 的委托类型。
我们这样为委托赋值：
MyDelegateType myDel; myDel += &amp;lt;一些函数&amp;gt;; myDel(&amp;#34;first&amp;#34;, &amp;#34;second&amp;#34;); // 这样调用 匿名方法 Anonymous methods myDel = delegate (string first, string second) { return first.Length == second.</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 02 - 基本使用</title>
      <link>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-2/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-2/</guid>
      <description>前言 在上一章里，我们学习了响应式的基本概念。在这一章节，我们将编写一个股票监控程序。首先我们将使用传统的 .NET 事件系统来写一次，之后再通过 Rx 来重构。
传统事件写法 先编写一个类，其中只有一个事件属性： class StockTicker { public event EventHandler&amp;lt;StockTick&amp;gt; StockTick; } 编写一个类包含我们的数据： class StockTick { public string QuoteSymbol { get; set; } public decimal Price { get; set; } } 创建一个类来监听变化，并订阅事件： class StockMonitor { public StockMonitor(StockTicker ticker) { ticker.StockTick += OnStockTick; // OnStockTick 注册事件 } ... } 因为我们需要比较股票价格的变化，所以我们可以通过字典来存储先前的股票数据。编写一个新类： class StockInfo { public StockInfo(string symbol, decimal price) { Symbol = symbol; PrevPrice = price; } public string Symbol { get; set; } public decimal PrevPrice { get; set; } } 之后你可以在 StockMonitor 中声明一个 StockInfo 类型的属性。</description>
    </item>
    
    <item>
      <title>Rx.NET 响应式编程指北 01 - 基础概念</title>
      <link>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-1/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kyocius.github.io/posts/dotnet/reactive/rx-magic-1/</guid>
      <description>前言 最近刚读了 Rx.NET in Action，学到的新概念非常多，担忧自己会日渐遗忘，觉得有必要写一篇博客记录一下，说不定也能帮到一些志同道合的朋友。
本系列将会使用我深爱的 C# 语言和 Rx.NET 框架来讲解响应式编程（Reactive Programming）的魔法 ╰(°▽°)╯
背景知识 C# 中的委托、泛型、事件以及 LINQ 等概念 Rx = Reactive Extension Rx 是由微软旗下一个实验室发起的 巨硬大法好 响应式概念 Rx 到底是干啥的？
首先来看看微软的解释：Rx = Observables + LINQ + Schedulers。谔谔，啥玩意儿？
那看看大佬怎么解释的吧：Rx = 处理异步数据流。这个解释还行，但还是不明白。
这里是更通俗的解释：
var a = 1; var b = 2; var c = a + b; // c 的值显然为 3 当你改变 a 或者 b 值的时候，按照我们以前的思维，c 的值并不会随之发生变化。
如果我们想要 c 的值随之而改变呢？很简单，快快使用 Rx！
可观察对象 Observable public interface IObservable&amp;lt;T&amp;gt; { IDisposable Subscribe(IObserver&amp;lt;T&amp;gt; observer); } 接口只有一个方法 Subscribe，返回 IDisposable 对象（代表着订阅事件本身） Observable 持有 Observer 的集合，在值改变时随时通知它们 IDisposable 对象可以通过 Dispose 方法随时取消订阅 观察者 Observer 观察者的源码其实也很简单。</description>
    </item>
    
  </channel>
</rss>
